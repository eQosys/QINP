\\ QINP Standard Library
\\ Algorithms

import "error.qnp"
import "memory.qnp"

space std:
	\\ Function signature for a comparison function.
	define FN_COMPARE fn<bool>(void const*, void const*)

	\\ Function signature for a swap function.
	define FN_SWAP fn<>(void*, void*)

	\\ Function signature for a random number generator.
	define FN_RANDOM fn<u64>()

	\\ Function signature for deleting an object.
	define FN_DELETE fn<>(void*)

	\\ Macro to define a lambda function that compares two elements according to the given check.
	\\ @param check The check to use. (e.g. *(i64*)a < *(i64*)b)
	define LMBD_COMPARE(check) lambda<bool>(void const* a, void const* b): return check;

	\\ Macro to define a lambda function that compares two elements of the given type using the `<` operator.
	\\ @param type The type of the elements.
	define LMBD_COMPARE_DT(type) .std.LMBD_COMPARE(*(type const*)a < *(type const*)b)

	\\ Macro to define a lambda function that swaps two elements by copying them per byte.
	\\ @param size The size of the elements.
	define LMBD_SWAP(size) lambda<>(void* a, void* b): .std.swap(a, b, size);

	\\ Macro to define a lambda function that swaps two elements of the given type by copying them per byte.
	\\ @param type The type of the elements.
	define LMBD_SWAP_DT(type) .std.LMBD_SWAP(sizeof(type))

	\\ Macro to define a lambda function that deletes an object.
	\\ @param type The type of the object.
	define LMBD_DELETE_DT(type) lambda<>(void* ptr): .std.delete((type*)ptr);

	\\ Swaps the content of two objects. (The size of both objects must be the same and detectable with `sizeof`)
	\\ @param a The first object.
	\\ @param b The second object.
	define SWAP_OBJ(a, b) .std.swap(&a, &b, sizeof(a))

	\\ Sorts an array of elements.
	\\ @param array The array to sort.
	\\ @param count The number of elements in the array.
	\\ @param elemSize The size of each element.
	\\ @param compare A function that compares two elements. (Ascending: true if a < b)
	\\ @param swap A function that swaps two elements.
	\\ @return The sorted array.
	fn<void*> sort(void* array, u64 count, u64 elemSize, FN_COMPARE compare, FN_SWAP swap)...

	\\ Sorts an array of elements using the merge sort algorithm. (Copies elements per byte)
	\\ @param array The array to sort.
	\\ @param count The number of elements in the array.
	\\ @param elemSize The size of each element.
	\\ @param compare A function that compares two elements. (Ascending: true if a < b)
	\\ @param swap A function that swaps two elements.
	\\ @return The sorted array.
	fn<void*> mergeSort(void* array, u64 count, u64 elemSize, FN_COMPARE compare)...

	\\ Internal function to sort an array of elements using the merge sort algorithm. (Copies elements per byte)
	\\ @param array The array to sort.
	\\ @param count The number of elements in the array.
	\\ @param elemSize The size of each element.
	\\ @param compare A function that compares two elements. (Ascending: true if a < b)
	\\ @param temp A temporary buffer to use for sorting. (Must be at least `count * elemSize` bytes large)
	\\ @return The sorted array.
	fn<void*> __mergeSort(void* array, u64 count, u64 elemSize, FN_COMPARE compare, void* temp)...

	\\ Merges two sorted arrays into a single sorted array. (Copies elements per byte)
	\\ @param array The array to merge into.
	\\ @param left The left array.
	\\ @param right The right array.
	\\ @param leftCount The number of elements in the left array.
	\\ @param rightCount The number of elements in the right array.
	\\ @param elemSize The size of each element.
	\\ @param compare A function that compares two elements. (Ascending: true if a < b)
	fn<> __merge(void* array, void* left, void* right, u64 leftCount, u64 rightCount, u64 elemSize, FN_COMPARE compare)...

	\\ Shuffles an array of elements.
	\\ @param array The array to shuffle.
	\\ @param count The number of elements in the array.
	\\ @param elemSize The size of each element.
	\\ @param swap A function that swaps two elements.
	\\ @param random A function that returns a random number.
	fn<> shuffle(void* array, u64 count, u64 elemSize, FN_SWAP swap, FN_RANDOM random)...

	\\ Swaps the content of two arrays.
	\\ @param a The first array.
	\\ @param b The second array.
	\\ @param size The size of each array.
	fn<> swap(void* a, void* b, u64 size)...

	\\ Returns the index of any elemnt in an array that matches the given key.
	\\ @param key The key to search for.
	\\ @param array The array to search. (Must be sorted in the same order as compare would sort the array)
	\\ @param count The number of elements in the array.
	\\ @param elemSize The size of each element.
	\\ @param compare A function that compares two elements. (Ascending: true if a < b)
	\\ @return The index of the element that matches the key, or -1 if no element matches the key.
	fn<u64> bsearch(void const* key, void const* array, u64 count, u64 elemSize, FN_COMPARE compare)...

	\\ Counts the number of elements in a variadic argument list.
	\\ @param first The first argument.
	\\ @return The number of arguments. (Always 1)
	fn<u64> countVarArgs(?T first)...

	\\ Counts the number of elements in a variadic argument list.
	\\ @param first The first argument.
	\\ @param ... The remaining arguments.
	\\ @return The number of arguments.
	fn<u64> countVarArgs(?T first, ...)...



defer
space std:
	fn<void*> sort(void* array, u64 count, u64 elemSize, FN_COMPARE compare, FN_SWAP swap)!:	
		if !array || !compare || !swap:
			error.set(error.ID.InvalidArgument)
			return null
		
		var<u64> end = count

		while end > 0:
			var<u64> i = 0
			while i + 1 < end:
				if compare(array + (i + 1) * elemSize, array + i * elemSize):
					swap(array + (i + 1) * elemSize, array + i * elemSize)
				++i
			--end

		return array

	fn<void*> mergeSort(void* array, u64 count, u64 elemSize, FN_COMPARE compare)!:
		var temp = malloc(count * elemSize)
		var result = __mergeSort(array, count, elemSize, compare, temp)
		free(temp)
		return result

	fn<void*> __mergeSort(void* array, u64 count, u64 elemSize, FN_COMPARE compare, void* temp)!:
		if !array || !compare || !temp:
			error.set(error.ID.InvalidArgument)
			return null

		if count < 2:
			return array

		var<u64> mid = count / 2

		\\println("mergeSort: % % %", mid, count - mid, count)

		__mergeSort(array, mid, elemSize, compare, temp)
		__mergeSort(array + mid * elemSize, count - mid, elemSize, compare, temp)

		__merge(temp, array, array + mid * elemSize, mid, count - mid, elemSize, compare)

		memcpy(array, temp, count * elemSize)

		return array
	
	fn<> __merge(void* array, void* left, void* right, u64 leftCount, u64 rightCount, u64 elemSize, FN_COMPARE compare)!:
		if !array || !left || !right || !compare:
			error.set(error.ID.OutOfMemory)
			return

		var<u64> i = 0
		var<u64> j = 0
		var<u64> k = 0

		while i < leftCount && j < rightCount:
			if compare(left + i * elemSize, right + j * elemSize):
				memcpy(array + k * elemSize, left + i * elemSize, elemSize)
				++i
			else:
				memcpy(array + k * elemSize, right + j * elemSize, elemSize)
				++j
			++k

		while i < leftCount:
			memcpy(array + k * elemSize, left + i * elemSize, elemSize)
			++i
			++k

		while j < rightCount:
			memcpy(array + k * elemSize, right + j * elemSize, elemSize)
			++j
			++k

	fn<> shuffle(void* array, u64 count, u64 elemSize, FN_SWAP swap, FN_RANDOM random)!:
		if !array || !swap || !random:
			error.set(error.ID.InvalidArgument)
			return

		var<u64> i = -1
		while ++i < count:
			std.swap(array + i * elemSize, array + random() % count * elemSize, elemSize)

	fn<> swap(void* a, void* b, u64 size)!:
		if !a || !b:
			error.set(error.ID.InvalidArgument)
			return

		var<u8> temp
		var<u64> i = -1
		while ++i < size:
			temp = ((u8*)a)[i]
			((u8*)a)[i] = ((u8*)b)[i]
			((u8*)b)[i] = temp

	fn<u64> bsearch(void const* key, void const* array, u64 count, u64 elemSize, FN_COMPARE compare)!:
		if !key || !array || !compare:
			error.set(error.ID.InvalidArgument)
			return -1

		var<u64> start = 0
		var<u64> end = count
		var<u64> mid

		while start < end:
			mid = (start + end) / 2
			if compare(key, array + mid * elemSize):
				end = mid
			elif compare(array + mid * elemSize, key):
				start = mid + 1
			else:
				return mid
		
		return -1

	fn<u64> countVarArgs(?T first)!:
		return 1

	fn<u64> countVarArgs(?T first, ...)!:
		return 1 + countVarArgs(...)