\\ QINP Standard Library
\\ List

import "memory.qnp"
import "error.qnp"
import "iterator.qnp"

space std:
	\\ A doubly-linked list.
	pack List:
		\\ A single node in a list.
		pack Node:
			\\ Pointer to the previous node.
			var<Node*> prev
			\\ Pointer to the next node.
			var<Node*> next
			\\ The data stored in the node.
			var<void*> data

		\\ The first node in the list.
		var<Node*> m_first
		\\ The last node in the list.
		var<Node*> m_last

		\\ Constructs a new list.
		\\ @param self Self pointer
		\\ @return True on success, otherwise false.
		fn<bool> __new__(List* self)...

		\\ Destructs the given list.
		\\ @param self Self pointer
		fn<> __delete__(List* self)...

		\\ Clears the list.
		\\ @param self Self pointer
		fn<> clear(List* self)...

		\\ Appends the given data to the list.
		\\ @param self Self pointer
		\\ @param data The data to append.
		\\ @return The new node.
		fn<.std.List.Node*> push_back(List* self, ?T data)...

		\\ Prepends the given data to the list.
		\\ @param self Self pointer
		\\ @param data The data to prepend.
		\\ @return The new node.
		fn<.std.List.Node*> push_front(List* self, ?T data)...

		\\ Removes and returns the last node of the list.
		\\ @param self Self pointer
		\\ @return The last node of the list.
		fn<?T> pop_back(List* self)...

		\\ Removes and returns the first node of the list.
		\\ @param self Self pointer
		\\ @return The first node of the list.
		fn<?T> pop_front(List* self)...

		\\ Inserts a new node with the given data before the given node.
		\\ @param self Self pointer
		\\ @param node The node to insert before.
		\\ @param data The data to insert.
		\\ @return The new node.
		fn<.std.List.Node*> insert_before(List* self, Node* node, ?T data)...

		\\ Inserts a new node with the given data after the given node.
		\\ @param self Self pointer
		\\ @param node The node to insert after.
		\\ @param data The data to insert.
		\\ @return The new node.
		fn<.std.List.Node*> insert_after(List* self, Node* node, ?T data)...

		\\ Removes and destroys the given node from the list.
		\\ @param self Self pointer
		\\ @param node The node to remove.
		\\ @return The data stored in the removed node.
		fn<?T> remove(List* self, Node* node)...

		\\ Removes and destroys the node before the given node from the list.
		\\ @param self Self pointer
		\\ @param node The node to remove before.
		\\ @return The data stored in the removed node.
		fn<?T> remove_before(List* self, Node* node)...

		\\ Removes and destroys the node after the given node from the list.
		\\ @param self Self pointer
		\\ @param node The node to remove after.
		\\ @return The data stored in the removed node.
		fn<?T> remove_after(List* self, Node* node)...

		\\ Get the length of the list.
		\\ @param self Self pointer
		\\ @return The length of the list.
		fn<u64> length(List const* self)...

		\\ Check if the list is empty.
		\\ @param self Self pointer
		\\ @return True if the list is empty, otherwise false.
		fn<bool> empty(List const* self)...

		\\ Internal function to allocate a new node.
		\\ @param prev The previous node.
		\\ @param next The next node.
		\\ @param data The data to store in the node.
		\\ @return The new node.
		fn<.std.List.Node*> __alloc_node(Node* prev, Node* next, void* data)...

		\\ Internal function to free a node.
		\\ @param node The node to free.
		\\ @return The data stored in the node.
		fn<void*> __free_node(Node* node) nodiscard...

		\\ Get an iterator to the first node of the list.
		\\ Iterates from the first node to the last node.
		\\ The returned iterator must be freed with delete_iterator.
		\\ @param self Self pointer
		\\ @return An iterator to the first node of the list.
		fn<.std.Iterator*> iterator(List* self)...

		\\ Deletes the given iterator.
		\\ @param self Self pointer
		\\ @param it The iterator to delete.
		fn<> delete_iterator(List const* self, Iterator* it)...

defer
space std:
	fn<bool> List.__new__(List* self)!:
		self->m_first = null
		self->m_last = null
		return true

	fn<> List.__delete__(List* self)!:
		clear(self)
	
	fn<> List.clear(List* self)!:
		while !self->empty():
			self->pop_front({void*})

	fn<.std.List.Node*> List.push_back(List* self, ?T data)!:
		var<Node*> node = __alloc_node(self->m_last, null, data)

		if self->m_last:
			self->m_last->next = node

		self->m_last = node

		if !self->m_first:
			self->m_first = node

		return node

	fn<.std.List.Node*> List.push_front(List* self, ?T data)!:
		var<Node*> node = __alloc_node(null, self->m_first, data)

		if self->m_first:
			self->m_first->prev = node

		self->m_first = node

		if !self->m_last:
			self->m_last = node

		return node

	fn<?T> List.pop_back(List* self)!:
		if self->empty():
			error.set(error.ID.InvalidArgument)
			return null

		var<Node*> node = self->m_last
		self->m_last = node->prev

		if self->m_last:
			self->m_last->next = null
		else:
			self->m_first = null

		return (T)__free_node(node)

	fn<?T> List.pop_front(List* self)!:
		if self->empty():
			error.set(error.ID.InvalidArgument)
			return null

		var<Node*> node = self->m_first
		self->m_first = node->next

		if self->m_first:
			self->m_first->prev = null
		else:
			self->m_last = null

		return (T)__free_node(node)


	fn<.std.List.Node*> List.insert_before(List* self, Node* node, ?T data)!:
		if !node:
			error.set(error.ID.InvalidArgument)
			return null

		var<Node*> newNode = __alloc_node(node->prev, node, data)

		if node->prev:
			node->prev->next = newNode
		else:
			self->m_first = newNode

		node->prev = newNode

		return newNode

	fn<.std.List.Node*> List.insert_after(List* self, Node* node, ?T data)!:
		if !node:
			error.set(error.ID.InvalidArgument)
			return null

		var<Node*> newNode = __alloc_node(node, node->next, data)

		if node->next:
			node->next->prev = newNode
		else:
			self->m_last = newNode

		node->next = newNode

		return newNode

	fn<?T> List.remove(List* self, Node* node)!:
		if !node:
			error.set(error.ID.InvalidArgument)
			return null

		if node->prev:
			node->prev->next = node->next
		else:
			self->m_first = node->next

		if node->next:
			node->next->prev = node->prev
		else:
			self->m_last = node->prev

		return (T)__free_node(node)

	fn<?T> List.remove_before(List* self, Node* node)!:
		if !node:
			error.set(error.ID.InvalidArgument)
			return null

		return remove(self, node->prev)

	fn<?T> List.remove_after(List* self, Node* node)!:
		if !node:
			error.set(error.ID.InvalidArgument)
			return null

		return remove(self, node->next)

	fn<u64> List.length(List const* self)!:
		var<u64> length = 0
		var<Node*> node = self->m_first

		while node:
			++length
			node = node->next

		return length

	fn<bool> List.empty(List const* self)!:
		return self->m_first == null

	fn<.std.List.Node*> List.__alloc_node(Node* prev, Node* next, void* data)!:
		var<Node*> node = (Node*)std.malloc(sizeof(Node))
		node->prev = prev
		node->next = next
		node->data = data
		return node

	fn<void*> List.__free_node(Node* node) nodiscard!:
		var data = node->data
		std.free(node)
		return data

	fn<.std.Iterator*> List.iterator(List* self)!:
		return new( \
			Iterator, \
			self->m_first, \
			lambda<bool>(void const* node): return node != null;, \
			lambda<void*>(void* node): return ((.std.List.Node*)node)->data;, \
			lambda<void*>(void* node): return ((.std.List.Node*)node)->next; \
		)

	fn<> List.delete_iterator(List const* self, Iterator* iterator)!:
		delete(iterator)
