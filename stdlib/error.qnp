\\ QINP Standard Library
\\ Errors

space std:
	space error:
		enum ID:
			Success
			InvalidArgument
			AssertionFailed
			OutOfMemory
			FileIO
			__ERR_ID_COUNT

		\\ Internal variable to hold the set error.
		var<ID> __lastErrorID = ID.Success

		\\ Sets the global error value. Can be retrieved via a call to 'getError'
		\\ @param err id of the error to be set.
		fn<> set(ID err)...

		\\ Retrieves the last error set.
		\\ @return Last error id that has been set.
		fn<ID> get()...

		\\ Clears the last error set.
		fn<> clear()...

		\\ Returns a string containing a description for the provided error.
		\\ @param err ID of the error to return a description for. (null if no description is present)
		\\ @return Description of the error. null on error.
		fn<u8 const*> toString(ID err)...

		\\ Generates the error strings for the error IDs.
		\\ @return Array of error strings.
		fn<u8 const**> __genErrorStrings()...

defer
space std:
	space error:
		fn<> set(ID err)!:
			__lastErrorID = err

		fn<ID> get()!:
			return __lastErrorID

		fn<> clear()!:
			__lastErrorID = ID.Success

		fn<u8 const*> toString(ID err)!:
			static<u8 const**> errorStrings = __genErrorStrings()

			if err >= ID.__ERR_ID_COUNT:
				return "error.toString: Invalid Error ID"

			var str = errorStrings[(u64)err]
			if !str:
				str = "error.toString: No information available"

			return str

		fn<u8 const**> __genErrorStrings()!:
			static<bool> initialized = false
			static<u8 const*[ID.__ERR_ID_COUNT]> strings
			if initialized:
				return strings

			strings[(u64)ID.Success] = "Success"
			strings[(u64)ID.InvalidArgument] = "Invalid Argument"
			strings[(u64)ID.AssertionFailed] = "Assertion Failed"
			strings[(u64)ID.OutOfMemory] = "Out of Memory"
			strings[(u64)ID.FileIO] = "File IO Error"
			
			initialized = true
			return strings
