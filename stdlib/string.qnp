\\ QINP Standard Library
\\ Strings

import "error.qnp"
import "order.qnp"
import "algorithm.qnp"

space std:
	\\ Used to convert between string and integer
	define __BASE_CHARS_LOWER "0123456789abcdefghijklmnopqrstuvwxyz"

	\\ String class
	pack String:
		var<u8*> m_data
		var<u64> m_length

		\\ Construct an empty string
		\\ @param self Self pointer
		\\ @return True if successful, otherwise false
		fn<bool> __new__(String* self) nodiscard...

		\\ Construct a string from a null-terminated string
		\\ @param self Self pointer
		\\ @param str The null-terminated string to copy
		\\ @return True if successful, otherwise false
		fn<bool> __new__(String* self, u8 const* str) nodiscard...

		\\ Construct a string from the first num characters of a string
		\\ @param self Self pointer
		\\ @param str The string to copy
		\\ @param num The number of characters to copy
		\\ @return True if successful, otherwise false
		fn<bool> __new__(String* self, u8 const* str, u64 num) nodiscard...

		\\ Construct a string from another string
		\\ @param self Self pointer
		\\ @param other The string to copy
		\\ @return True if successful, otherwise false
		fn<bool> __new__(String* self, String const* other) nodiscard...

		\\ Destruct a string
		\\ @param self Self pointer
		fn<> __delete__(String* self)...

		\\ Get the raw string data
		\\ @param self Self pointer
		\\ @return The raw string data
		fn<u8 const*> raw(String const* self) nodiscard...

		\\ Get the length of the string (without the null terminator)
		\\ @param self Self pointer
		\\ @return The length of the string
		fn<u64> length(String const* self) nodiscard...

		\\ Clear the string
		\\ @param self Self pointer
		\\ @return True if successful, otherwise false
		fn<bool> clear(String* self)...

		\\ Append a string to the end of the string
		\\ If the operation fails, the string is left unchanged
		\\ @param self Self pointer
		\\ @param other The string to append
		\\ @return True if successful, otherwise false
		fn<bool> append(String* self, String const* other)...

		\\ Push a character to the end of the string
		\\ If the operation fails, the string is left unchanged
		\\ @param self Self pointer
		\\ @param ch The character to push
		\\ @return True if successful, otherwise false
		fn<bool> push_back(String* self, u8 ch)...

		\\ Assign a string to the string
		\\ If the operation fails, the string is left unchanged
		\\ @param self Self pointer
		\\ @param other The string to assign
		\\ @return True if successful, otherwise false
		fn<bool> assign(String* self, String const* other)...

		\\ Swap two strings
		\\ @param self Self pointer
		\\ @param other The string to swap with
		fn<> swap(String* self, String* other)...

		\\ Compare this string with another string
		\\ @param self Self pointer
		\\ @param other The string to compare
		\\ @return Less/Equal/Greater (Lexicographical)
		fn<Order> compare(String const* self, String const* other) nodiscard...

		\\ lower
		\\ upper

	\\ Determine the length of a string (without the null terminator)
	\\ @param str The null-terminated string to measure
	\\ @return The length of the string
	fn<u64> strlen(u8 const* str) nodiscard...

	\\ Compare two null-terminated strings
	\\ @param str1 The first string
	\\ @param str2 The second string
	\\ @return 0 if the strings are equal, < 0 if str1 is less than str2, > 0 if str1 is greater than str2
	fn<i64> strcmp(u8 const* str1, u8 const* str2) nodiscard...

	\\ Locate the first occurencce of a character in a string
	\\ @param str The string to search
	\\ @param ch The character to search for
	\\ @return The address of the first occurence of ch in str, or NULL if not found
	fn<u8 const*> strchr(u8 const* str, u8 ch) nodiscard...

	\\ Reverse a null-terminated string (in-place)
	\\ @param str The null-terminated string to reverse
	\\ @return The reversed string
	fn<u8*> strrev(u8* str)...

	\\ Reverse a string of specified length (in-place)
	\\ @param begin Pointer to the first character of the string to reverse
	\\ @param end Pointer to the character after the last character of the string to reverse (usually the null-terminator)
	\\ @return The reversed string
	fn<u8*> strrev(u8* begin, u8* end)...

	\\ Convert an integer to a string
	\\ @param num The integer to convert
	\\ @param str The string to store the converted integer in
	\\ @param base The base to use for the conversion (Valid values are 2 to 36 (inclusive))
	\\ @return The null-terminated string representation of the integer
	fn<u8*> itos(i64 num, u8* str, i64 base) nodiscard...

	\\ Convert a string to a base-10 integer
	\\ @param str The string to convert
	\\ @param base The base to use for the conversion (Valid values are 2 to 36 (inclusive))
	\\ @return The integer represented by the string
	fn<i64> stoi(u8 const* str, i64 base) nodiscard...

	\\ Convert a string to a base-10 integer
	\\ @param str The string to convert
	\\ @param pNextOut A pointer to a pointer to the first character after the converted integer (set by the function)
	\\ @param base The base to use for the conversion (Valid values are 2 to 36 (inclusive))
	\\ @return The integer represented by the string
	fn<i64> stoi(u8 const* str, u8 const** pNextOut, i64 base) nodiscard...

	\\ Converts a character to uppercase. Values not in the range 'a' to 'z' are unchanged.
	\\ @param c The character to convert
	\\ @return The uppercase character
	fn<u8> toupper(u8 c) nodiscard...

	\\ Converts a character to lowercase. Values not in the range 'A' to 'Z' are unchanged.
	\\ @param c The character to convert
	\\ @return The lowercase character
	fn<u8> tolower(u8 c) nodiscard...

	\\ Returns wether a character is a number
	\\ @param c The character to check
	\\ @return True if the character is a number, false otherwise
	fn<bool> isnum(u8 c) nodiscard...
	
	\\ Returns wether a character is a letter
	\\ @param c The character to check
	\\ @return True if the character is a letter, false otherwise
	fn<bool> isalpha(u8 c) nodiscard...

	\\ Returns wether a character is a letter or a digit
	\\ @param c The character to check
	\\ @return True if the character is a letter or a digit, false otherwise
	fn<bool> isalnum(u8 c) nodiscard...

	\\ Returns wether a character is a whitespace character
	\\ @param c The character to check
	\\ @return True if the character is a whitespace character, false otherwise
	fn<bool> isspace(u8 c) nodiscard...

defer
space std:
	fn<bool> String.__new__(String* self) nodiscard!:
		return self->__new__("")

	fn<bool> String.__new__(String* self, u8 const* str) nodiscard!:
		return self->__new__(str, strlen(str))

	fn<bool> String.__new__(String* self, u8 const* str, u64 num) nodiscard!:
		self->m_length = num
		self->m_data = (u8*)malloc(self->m_length + 1)
		if !self->m_data:
			return false
		std.memcpy(self->m_data, str, self->m_length + 1)
		return true

	fn<bool> String.__new__(String* self, String const* other) nodiscard!:
		return self->__new__(other->m_data, other->m_length)

	fn<> String.__delete__(String* self)!:
		free(self->m_data)
		self->m_data = null
		self->m_length = 0

	fn<u8 const*> String.raw(String const* self) nodiscard!:
		return self->m_data

	fn<u64> String.length(String const* self) nodiscard!:
		return self->m_length

	fn<bool> String.clear(String* self)!:
		self->__delete__()
		return self->__new__()

	fn<bool> String.append(String* self, String const* other)!:
		var newLength = self->m_length + other->m_length
		var newData = (u8*)malloc(newLength + 1)
		if !newData:
			return false
		std.memcpy(newData, self->m_data, self->m_length)
		std.memcpy(newData + self->m_length, other->m_data, other->m_length + 1)
		self->__delete__()
		self->m_data = newData
		self->m_length = newLength
		return true

	fn<bool> String.push_back(String* self, u8 ch)!:
		var tmp = new(String, &ch, 1)
		var ret = self->append(tmp)
		delete(tmp)
		return ret

	fn<bool> String.assign(String* self, String const* other)!:
		var tmp = new(String, other)
		if !tmp:
			return false
		self->__delete__()
		self->swap(tmp)
		delete(tmp)
		return true

	fn<> String.swap(String* self, String* other)!:
		std.swap(&self->m_data, &other->m_data, sizeof(self->m_data))
		std.swap(&self->m_length, &other->m_length, sizeof(self->m_length))

	fn<Order> String.compare(String const* self, String const* other) nodiscard!:
		var<u64> i = 0
		while self->m_data[i] == other->m_data[i] && i < self->m_length:
			++i

		if self->m_data[i] < other->m_data[i]:
			return Order.Less
		elif self->m_data[i] > other->m_data[i]:
			return Order.Greater
		return Order.Equal





	fn<u64> strlen(u8 const* str) nodiscard!:
		if !str:
			error.set(error.ID.InvalidArgument)
			return null

		const begin = str
		while *str: ++str
		return (u64)(str - begin)
	
	fn<i64> strcmp(u8 const* str1, u8 const* str2) nodiscard!:
		if !str1 || !str2:
			error.set(error.ID.InvalidArgument)
			return null

		while *str1 == *str2 && *str1 && *str2:
			++str1
			++str2
		return (i64)*str1 - (i64)*str2

	fn<u8 const*> strchr(u8 const* str, u8 ch) nodiscard!:
		if !str:
			error.set(error.ID.InvalidArgument)
			return null

		while *str != ch && *str: ++str
		return *str == ch ? str : (u8 const*)null

	fn<u8*> strrev(u8* str)!:
		if !str:
			error.set(error.ID.InvalidArgument)
			return null

		return strrev(str, str + strlen(str))

	fn<u8*> strrev(u8* begin, u8* end)!:
		if !begin || !end:
			error.set(error.ID.InvalidArgument)
			return null

		const str = begin

		while begin < end:
			const<u8> temp = *begin
			*begin++ = *--end
			*end = temp

		return str

	fn<u8*> itos(i64 num, u8* str, i64 base) nodiscard!:
		if !str || base < 2 || base > 36:
			error.set(error.ID.InvalidArgument)
			return null

		static const __baseCharsLower = __BASE_CHARS_LOWER
		const begin = str
		const negative = num < 0

		if negative: num *= -1

		do:
			*str++ = __baseCharsLower[num % base]
			num /= base
		while num

		if negative: *str++ = '-'

		*str = null

		return strrev(begin, str)

	fn<i64> stoi(u8 const* str, i64 base) nodiscard!:
		return stoi(str, null, base)

	fn<i64> stoi(u8 const* str, u8 const** pNextOut, i64 base) nodiscard!:
		if !str || base < 2 || base > 36:
			error.set(error.ID.InvalidArgument)
			return null

		static const __baseCharsLower = __BASE_CHARS_LOWER
		var num = 0

		if *str == '+': ++str

		const negative = *str == '-'

		if negative: ++str

		var<u8> c
		while (c = tolower(*str)):
			var i = strchr(__baseCharsLower, c)
			if i == null || (i64)(i -= __baseCharsLower) >= base:
				break
			num *= base
			num += (i64)(i)
			++str

		if pNextOut: *pNextOut = str

		return negative ? -num : num

	fn<u8> toupper(u8 c) nodiscard!:
		return 'a' <= c && c <= 'z' ? 'A' - 'a' + c : c

	fn<u8> tolower(u8 c) nodiscard!:
		return 'A' <= c && c <= 'Z' ? 'a' - 'A' + c : c

	fn<bool> isnum(u8 c) nodiscard!:
		return '0' <= c && c <= '9'
	
	fn<bool> isalpha(u8 c) nodiscard!:
		return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')

	fn<bool> isalnum(u8 c) nodiscard!:
		return isnum(c) || isalpha(c)
	
	fn<bool> isspace(u8 c) nodiscard!:
		return c == ' ' || c == '\t'