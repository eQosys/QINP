\\ QINP Standard Library
\\ Time - Linux Specific

import "__syscall.qnp"
import "../../error.qnp"

space std:
	define __CLOCK_REALTIME 0
	define __CLOCK_MONOTONIC 1
	define __CLOCK_PROCESS_CPUTIME_ID 2
	define __CLOCK_THREAD_CPUTIME_ID 3

	\\ Holds a time value in seconds and nanoseconds
	pack __timespec:
		var<i64> seconds
		var<i64> nanoseconds

	\\ Retrieves the current time of the system
	\\ @param clockID The clock to use
	\\ @param t A pointer to a __timespec pack to store the time in
	\\ @return 0 on success, -1 on error
	fn<i32> __clock_gettime(i32 clockID, __timespec* t)...



defer
space std:
	fn<i32> __clock_gettime(i32 clockID, __timespec* pts)!:
		if !pts:
			error.set(error.ID.InvalidArgument)
			return -1
		return __syscall(__SYS_CLOCK_GETTIME, clockID, pts)

	fn<u64> getTime() nodiscard!:
		var<__timespec> ts
		return __clock_gettime(__CLOCK_REALTIME, &ts) < 0 ? \
			-1 : \
			ts.seconds * 1000 + ts.nanoseconds / 1000000

	fn<i32> sleep(u64 ms)!:
		var<__timespec> ts
		ts.seconds = ms / 1000
		ts.nanoseconds = (ms % 1000) * 1000000
		return __syscall(__SYS_NANOSLEEP, &ts, &ts)