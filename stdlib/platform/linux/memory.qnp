\\ QINP Standard Library
\\ Memory - Linux Specific

import "__syscall.qnp"
import "../../math.qnp"
import "../../error.qnp"

import "../../stdio.qnp"

space std:
	define __PAGE_SIZE 4096
	define __FREE_PAGES_COUNT_MAX 256
	define __MEM_ALIGNMENT_SIZE 8

	\\ The header for every allocated block of memory (used for freeing/keeping track of allocated, unused memory)
	pack __MemBlockHeader:
		var<__MemBlockHeader*> prev
		var<__MemBlockHeader*> next
		var<u64> bodySize

	\\ Changes the data segment size to the given size and returns the new size.
	\\ @param size The new size
	\\ @return The size after the change (Current size on failure)
	fn<u64> __brk(u64 size)...

	\\ Changes the data segment size by the given amount and returns a pointer to the newly allocated memory.
	\\ @param increment The amount to increase/decrease the data segment size by
	\\ @return A pointer pointing to the previous data segment end (null on failure)
	fn<void*> __sbrk(i64 increment)...

	\\ Retrieves a free block of memory of at least the given size.
	\\ If no such block exists, a new block is allocated.
	\\ @param minSize The minimum size of the block to retrieve
	\\ @return A pointer to the block (null on failure)
	fn<__MemBlockHeader*> __getFreeBlock(u64 minSize) nodiscard...

	\\ Allocates a new block of memory of at least the given size.
	\\ @param minSize The minimum size of the block to allocate
	\\ @return A pointer to the block (null on failure)
	fn<__MemBlockHeader*> __allocateBlock(u64 minSize) nodiscard...

	\\ Truncates the given block of memory to the given size and adds the remaining memory to the list of free blocks.
	\\ @param block The block to split
	\\ @param newBodySize The size the first block should have
	\\ @return A pointer to the second block (null on failure)
	fn<> __truncateBlock(__MemBlockHeader* block, u64 newBodySize)...

	\\ Frees the given block of memory.
	\\ If the block is adjacent to other free blocks, they are merged.
	\\ If the block is at the end of the data segment and above a certain size, the data segment is shrunk.
	\\ @param block The block to free
	fn<> __freeBlock(__MemBlockHeader* block)...

	\\ Merges the given block with adjacent blocks if possible.
	\\ The block must be in the list of free blocks.
	\\ @param block The block to merge
	\\ @return A pointer to the merged block
	fn<__MemBlockHeader*> __mergeBlocks(__MemBlockHeader* block)...

	\\ First node in the list of allocated data blocks sorted by address
	var<__MemBlockHeader*> __memBlocks = null



defer
space std:
	
	fn<u64> __brk(u64 size)!:
		return __syscall(__SYS_BRK, size)

	fn<void*> __sbrk(i64 increment)!:
		const<u64> oldSize = __brk(0)
		const<u64> newSize = oldSize + increment
		if __brk(newSize) == oldSize:
			error.set(error.ID.OutOfMemory)
			return null
		return (void*)oldSize

	fn<__MemBlockHeader*> __getFreeBlock(u64 minSize) nodiscard!:

		\\ Check if there is a free block of the right size
		var prev = (__MemBlockHeader*)null
		var block = __memBlocks
		while block != null:
			if block->bodySize >= minSize: \\ Found a block of the right size

				\\ Remove the block from the list and return it
				if block->prev != null:
					block->prev->next = block->next
				if block->next != null:
					block->next->prev = block->prev
				if block == __memBlocks:
					__memBlocks = block->next
				block->prev = null
				block->next = null
				return block

			\\ Go to the next block
			prev = block
			block = block->next

		\\ Check if the last block is at the end of the data segment and can be extended
		if prev != null && (u64)prev + sizeof(__MemBlockHeader) + prev->bodySize == __brk(0):
			
			\\ Extend the block by page size increments
			var sizeDiff = ceil(minSize - prev->bodySize, __PAGE_SIZE)
			if __sbrk(sizeDiff) == null:
				return null
			prev->bodySize += sizeDiff

			\\ Remove the block from the list and return it
			if prev->prev != null:
				prev->prev->next = null
			prev->prev = null
			if prev == __memBlocks:
				__memBlocks = null
			return prev

		return __allocateBlock(minSize) 

	fn<__MemBlockHeader*> __allocateBlock(u64 minSize) nodiscard!:

		\\ Allocate a new block (page size increments)
		var allocSize = ceil(sizeof(__MemBlockHeader) + minSize, __PAGE_SIZE)
		var<__MemBlockHeader*> block = (__MemBlockHeader*)__sbrk(allocSize)
		if block == null:
			return null

		\\ Initialize the block
		block->prev = null
		block->next = null
		block->bodySize = allocSize - sizeof(__MemBlockHeader)

		return block

	fn<> __truncateBlock(__MemBlockHeader* block, u64 newBodySize)!:
		if block == null:
			return

		\\ Align the new size
		newBodySize = ceil(newBodySize, __MEM_ALIGNMENT_SIZE)

		\\ Check if the block is large enough to be split
		if block->bodySize < sizeof(__MemBlockHeader) + newBodySize:
			return

		\\ Create a new block
		var<__MemBlockHeader*> newBlock = (__MemBlockHeader*)((void*)block + sizeof(__MemBlockHeader) + newBodySize)

		\\ Initialize the new block
		newBlock->prev = null
		newBlock->next = null
		newBlock->bodySize = block->bodySize - sizeof(__MemBlockHeader) - newBodySize

		block->bodySize = newBodySize

		\\ Add the new block to the list of free blocks
		__freeBlock(newBlock)

	fn<> __freeBlock(__MemBlockHeader* block)!:
		if block == null:
			return

		var prev = (__MemBlockHeader*)null
		var curr = __memBlocks

		\\ Find the position to insert the block
		while curr != null && block > curr:
			prev = curr
			curr = curr->next

		\\ Insert the block
		if prev == null:
			__memBlocks = block
		else:
			prev->next = block

		block->prev = prev
		block->next = curr

		if curr != null:
			curr->prev = block

		\\ Merge the block with adjacent blocks if possible
		block = __mergeBlocks(block)

		\\ Shrink the data segment if possible
		if block->next == null && block->bodySize >= __PAGE_SIZE && (u64)block + sizeof(__MemBlockHeader) + block->bodySize == __brk(0):
			var sizeDiff = floor(block->bodySize, __PAGE_SIZE)
			block->bodySize -= sizeDiff
			__sbrk(-sizeDiff)

	fn<__MemBlockHeader*> __mergeBlocks(__MemBlockHeader* block)!:
		if block == null:
			error.set(error.ID.InvalidArgument)
			return null

		var prev = block->prev
		var next = block->next

		\\ Merge the block with the previous block if they are adjacent
		if prev != null && (void*)prev + sizeof(__MemBlockHeader) + prev->bodySize == (void*)block:
			prev->bodySize += sizeof(__MemBlockHeader) + block->bodySize
			prev->next = next
			if next != null:
				next->prev = prev
			block = prev

		\\ Merge the block with the next block if they are adjacent
		if next != null && (void*)block + sizeof(__MemBlockHeader) + block->bodySize == (void*)next:
			block->bodySize += sizeof(__MemBlockHeader) + next->bodySize
			block->next = next->next
			if next->next != null:
				next->next->prev = block

		return block

	fn<void*> malloc(u64 size) nodiscard!:
		if size == 0:
			error.set(error.ID.InvalidArgument)
			return null

		\\ Allocate a block of the right size
		var block = __getFreeBlock(size)
		
		\\ Truncate the block if it is too large to avoid wasting memory
		__truncateBlock(block, size)

		\\ Return a pointer to the block's body
		return (void*)(block + 1)

	fn<void*> realloc(void* ptr, u64 newSize) nodiscard!:
		\\ TODO: Proper implementation
		free(ptr)
		return malloc(newSize)

	fn<> free(void* ptr)!:
		if ptr == null:
			return
		
		\\ Get the block header
		var block = (__MemBlockHeader*)ptr - 1

		\\ Free the block
		__freeBlock(block)