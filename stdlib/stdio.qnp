\\ QINP Standard Library
\\ Standard Input/Output

import "string.qnp"

space std:
	\\ Print the first num chars of a string to stdout
	\\ @param str The string to print
	\\ @param len The length of the string to print
	\\ @return The number of characters printed. Negative on error.
	fn<i32> printn(u8 const* str, u64 num)...		\\ Platform dependent implementation

	\\ Print a null-terminated string to stdout
	\\ @param str The null-terminated string to print
	\\ @return The number of characters printed. Negative on error.
	fn<i32> print(u8 const* str)...

	\\ Print a single character to stdout
	\\ @param char The character to print
	\\ @return Positive on success, negative on error.
	fn<i32> print(u8 char)...

	\\ Print a base-10 value with any other integral type to stdout
	\\ @param num The integer to print
	\\ @return The number of characters printed. Negative on error.
	fn<i32> print(?T val)...

	\\ Print two or more values of different types consecutively to stdout
	\\ @param val The first value to print
	\\ @param ... The remaining values to print
	\\ @return Positive on success, negative on error.
	fn<i32> print(?T val, ...)...

	\\ Format a string and print it to stdout
	\\ @param str The string to print
	\\ @param val The first argument placed in the string
	\\ @return Positive on success, negative on error.
	fn<i32> print(u8 const* str, ?T val)...

	\\ Format a string and print it to stdout
	\\ @param str The string to print
	\\ @param val The first argument placed in the string
	\\ @param ... The remaining arguments placed in the string
	\\ @return Positive on success, negative on error.
	fn<i32> print(u8 const* str, ?T val, ...)...

	\\ Internal function to print a formatted string to stdout
	\\ @param pStr A pointer to the string to print
	\\ @param val The value to place in the string
	\\ @return Positive on success, negative on error.
	fn<i32> __printf(u8 const** pStr, ?T val)...

	\\ Prints a newline to stdout
	\\ @return Positive on success, negative on error.
	fn<i32> println()...

	\\ Same as print but appends a newline
	\\ @param val The value to print (passed to appropriate print function)
	\\ @return Positive on success, negative on error.
	fn<i32> println(?T val)...

	\\ Same as print but appends a newline
	\\ @param val The value to print (passed to appropriate print function)
	\\ @param ... The remaining values to print (passed to appropriate print function)
	\\ @return Positive on success, negative on error.
	fn<i32> println(?T val, ...)...

	\\ Reads a character from stdin
	\\ @return The character read
	fn<u8> getchar()...

	\\ Read a specified number of characters from stdin and append a null character
	\\ @param dest The destination buffer (Minimum buffer size: [num] + 1)
	\\ @param num The number of characters to read
	\\ @return Number of characters read, negative on error
	fn<i32> scann(u8* dest, u64 num)...		\\ Platform dependent implementation



defer
space std:
	fn<i32> print(u8 const* str)!:
		return printn(str, strlen(str))

	fn<i32> print(u8 char)!:
		return printn(&char, 1)

	fn<i32> print(?T val)!:
		const<u8> str[32]
		return print(itos(val, str, 10))

	fn<i32> print(?T val, ...)!:
		if print(val) < 0: return -1
		if print(...) < 0: return -1
		return 1

	fn<i32> print(u8 const* str, ?T val)!:
		if __printf(&str, val) < 0: return -1
		if print(str) < 0: return -1
		return 1

	fn<i32> print(u8 const* str, ?T val, ...)!:
		if __printf(&str, val) < 0: return -1
		if print(str, ...) < 0: return -1
		return 1

	fn<i32> __printf(u8 const** pStr, ?T val)!:
		const str = *pStr
		const dropIndex = strchr(str, '%')
		if dropIndex == null:
			*pStr = str + strlen(str)

			if printn(str, (u64)(*pStr - str)) < 0: return -1
			if print(val) < 0: return -1
			return 1

		*pStr = dropIndex + 1

		if printn(str, (u64)(dropIndex - str)) < 0: return -1
		if print(val) < 0: return -1
		return 1

	fn<i32> println()!:
		if print('\n') < 0: return -1
		return 1

	fn<i32> println(?T val)!:
		if print(val) < 0: return -1
		if println() < 0: return -1
		return 1

	fn<i32> println(?T val, ...)!:
		if print(val, ...) < 0: return -1
		if println() < 0: return -1
		return 1

	fn<u8> getchar()!:
		const<u8> buff[2]
		scann(buff, 1)
		return *buff

import.linux "platform/linux/stdio.qnp"
import.windows "platform/windows/stdio.qnp"