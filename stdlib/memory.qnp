\\ QINP Standard Library
\\ Memory

space std:
	define __MIN_MEM_LEN_USE_ALIGN 32 \\ minimum length of memory to use aligned algorithms on

	\\ Copy data from one buffer to another
	\\ Undefined behavior if the buffers overlap
	\\ @param dest The destination buffer
	\\ @param src The source buffer
	\\ @param num The number of bytes to copy
	\\ @return The destination buffer
	fn<void*> memcpy(void* dest, void const* src, u64 num)...

	\\ Set every byte in a buffer to a value
	\\ @param dest The destination buffer
	\\ @param val The value to set every byte to
	\\ @param num The number of bytes to set
	\\ @return The destination buffer
	fn<void*> memset(void* dest, u8 val, u64 num)...

	\\ Compare two buffers
	\\ @param a The first buffer
	\\ @param b The second buffer
	\\ @param num The number of bytes to compare
	\\ @return 0 if the buffers are equal, < 0 if the first byte that differs in a is less than in b, > 0 if the first byte that differs in a is greater than in b
	fn<i64> memcmp(void const* a, void const* b, u64 num) nodiscard...

	\\ Allocate a buffer of a given size
	\\ @param size The size of the buffer to allocate
	\\ @return The allocated buffer (null if failed)
	fn<void*> malloc(u64 size) nodiscard...		\\ Platform dependent implementation

	\\ Reallocate a buffer to a given size
	\\ @param pBuff The pointer to the block of memory to reallocate (Must be previously allocated by malloc)
	\\ @param size The new size of the buffer
	\\ @return The pointer to the newly allocated memory.
	fn<void*> realloc(void* pBuff, u64 size) nodiscard...		\\ Platform dependent implementation

	\\ Free a buffer
	\\ @param pBuff The buffer to free
	fn<> free(void* pBuff)...		\\ Platform dependent implementation



defer
space std:
	fn<void*> memcpy(void* dest, void const* src, u64 len)!:
		const d8End = (u8*)dest + len

		var d8 = (u8*)dest
		var s8 = (u8 const*)src

		if len >= __MIN_MEM_LEN_USE_ALIGN:
			while (u64)d8 % sizeof(u64): \\ Align to 8 bytes, testing for d8 < dEnd would be redundant
				*d8++ = *s8++

			var d64 = (u64*)d8
			var s64 = (u64 const*)s8
			const d64End = (u64*)d8End - 1
			
			while d64 < d64End:
				*d64++ = *s64++ \\ Copy 8 bytes at a time
			
			d8 = (u8*)d64
			s8 = (u8 const*)s64

		while d8 < d8End: \\ Copy remaining bytes
			*d8++ = *s8++

		return dest

	fn<void*> memset(void* dest, u8 val, u64 len)!:
		const d8End = (u8*)dest + len

		var d8 = (u8*)dest

		if len >= __MIN_MEM_LEN_USE_ALIGN:
			while (u64)d8 % sizeof(u64): \\ Align to 8 bytes, testing for d8 < end would be redundant
				*d8++ = val

			var v64 = (u64)val
			v64 |= (v64 << 8)
			v64 |= (v64 << 16)
			v64 |= (v64 << 32)

			var d64 = (u64*)d8
			const d64End = (u64*)d8End - 1
			
			while d64 < d64End:
				*d64++ = v64 \\ Set 8 bytes at a time
		
			d8 = (u8*)d64

		while d8 < d8End: \\ Set remaining bytes
			*d8++ = val

		return dest

	fn<i64> memcmp(void const* a, void const* b, u64 len) nodiscard!:
		var a8 = (u8 const*)a
		var b8 = (u8 const*)b
		const a8End = a8 + len

		if len >= __MIN_MEM_LEN_USE_ALIGN:
			while (u64 const)a8 % sizeof(u64): \\ Align to 8 bytes, testing for a8 < end would be redundant
				if *a8++ != *b8++:
					return *(a8 - 1) - *(b8 - 1)
			
			var a64 = (u64 const*)a8
			var b64 = (u64 const*)b8
			const a64End = (u64 const*)a8End - 1

			while a64 < a64End: \\ Compare 8 bytes at a time
				if *a64++ != *b64++:
					return *(a64 - 1) - *(b64 - 1)
			
			a8 = (u8 const*)a64
			b8 = (u8 const*)b64
		
		while a8 < a8End: \\ Compare remaining bytes
			if *a8++ != *b8++:
				return *(a8 - 1) - *(b8 - 1)

		return 0

import "platform/{platform}/memory.qnp"