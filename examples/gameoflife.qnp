import "stdio.qnp"
import "time.qnp"
import "memory.qnp"

define WIDTH 20
define HEIGHT 10
define N_ITERATIONS 50

pack Grid: var<bool[WIDTH][HEIGHT]> cells

std.print("Allocating required memory...")
var pMain = (Grid*)std.malloc(sizeof(Grid))
var pBack = (Grid*)std.malloc(sizeof(Grid))
std.print(" DONE!\n")

fn<> flip():
	var pTemp = pMain
	pMain = pBack
	pBack = pTemp

fn<> printBorder():
	std.println("+%-*f-\\+", "", WIDTH)

fn<> show():
	var i = -1
	printBorder()
	while ++i < HEIGHT:
		var j = -1
		std.print("|")
		while ++j < WIDTH:
			std.print(pMain->cells[j][i] ? "#" : " ")
		std.println("|")
	printBorder()

fn<> clear():
	std.print("\r")
	var i = 0
	while i++ < HEIGHT + 2:
		std.print("\e[1F")

fn<> update():
	var i = -1
	while ++i < WIDTH:
		var j = -1
		while ++j < HEIGHT:
			var count = 0
			var k = i-2
			while ++k < i+2:
				var l = j-2
				while ++l < j+2:
					if (k >= 0 && k < WIDTH) && \
						(l >= 0 && l < HEIGHT) && \
						(k != i || l != j):
						count += pMain->cells[k][l]
			pBack->cells[i][j] = pMain->cells[i][j] ? 2 <= count && count <= 3 : count == 3

fn<bool> hasChanged():
	var i = -1
	while ++i < WIDTH:
		var j = -1
		while ++j < HEIGHT:
			if pMain->cells[i][j] != pBack->cells[i][j]:
				return true
	return false

pMain->cells[0][2] = true
pMain->cells[1][0] = true
pMain->cells[1][2] = true
pMain->cells[2][1] = true
pMain->cells[2][2] = true

var n = 0
while n++ < N_ITERATIONS:
	show()
	update()
	std.sleep(100)
	clear()
	flip()

	if !hasChanged():
		break
show()

std.print("Ran for % iterations\n", n)

std.print("Freeing allocated memory...")
std.free(pMain)
std.free(pBack)
std.print(" DONE\n")