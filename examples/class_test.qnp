import "memory.qnp"
import "stdio.qnp"
import "order.qnp"

import "system.qnp"
import "time.qnp"

import "string.qnp"
import "list.qnp"

var str = std.new(std.String, "Hello ")
var str2 = std.new(std.String, "World!")
std.println("str->raw() = '%'", str->raw())
std.println("str->length() = %", str->length())
std.println("str2->raw() = '%'", str2->raw())
std.println("str2->length() = %", str2->length())

str->append(str2)

std.println("str->append(str2) = '%'", str->raw())

str->assign(str2)

std.println("str->assign(str2) = '%'", str->raw())

str->push_back('!')

std.println("str->push_back('!') = '%'", str->raw())
var order = str->compare(str2)
if order == std.Order.Less:
    std.println("str < str2")
elif order == std.Order.Greater:
    std.println("str > str2")
else:
    std.println("str == str2")

std.delete(str2)
std.delete(str)


var list = std.new(std.List)
list->push_back(std.new(std.String, "Hello"))
list->push_back(std.new(std.String, "World"))
list->push_back(std.new(std.String, "!"))

var it = list->iterator()
while it->hasNext():
    var str = it->next({std.String*})
    std.println("str->raw() = '%'", str->raw())
list->delete_iterator(it)

std.println("list->length() = %", list->length())

while !list->empty():
    var str = list->pop_back({std.String*})
    std.println("length : str = % : '%'", list->length(), str->raw())
    std.delete(str)

std.delete(list)

std.println("Compiler exit code: %", std.system("./bin/Debug/QINP ./examples/exit_code.qnp"))

std.println("exit_code.qnp exit code: %", std.system("./examples/exit_code.out 123"))