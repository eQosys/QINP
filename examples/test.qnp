import "assert.qnp"
import "fileio.qnp"
import "math.qnp"
import "memory.qnp"
import "stdio.qnp"
import "time.qnp"

std.println("Allocating 100 bytes")
var buff1 = std.malloc(100)
std.println("Allocating 10000 bytes")
const buff2 = std.malloc(10000)

std.println("Freeing 100 bytes")
std.free(buff1)

std.println("Freeing 10000 bytes")
std.free(buff2)

std.println("Allocating 12000 bytes")
buff1 = std.malloc(12000)

std.println("Freeing 12000 bytes")
std.free(buff1)

std.print("Allocating 1024 megabytes...")
buff1 = std.malloc(1024 * 1024 * 1024)
std.println(" DONE")

std.print("Clearing buff1... ")
const begin = std.getTime()
std.memset(buff1, 0, 1024 * 1024 * 1024)
const end = std.getTime()
std.println(" DONE\n -> Time: % ms", end - begin)

const str = (u8*)"ABCDEFGHIJKLMNOPQRSTUVWXYZ\n"
std.memcpy(str, "..................", 9)
std.println("%-----------------", str)

std.print("Freeing 1024 megabytes...")
std.free(buff1)
std.println(" DONE")

const str1 = (u8*)"Hello world, my name is TecStylos!"
var tok = std.strtok(str1, " ")
while tok:
	std.println(tok)
	tok = std.strtok(null, " ")

const str2 = \
	"Hello world, " \
	"my name is TecStylos!\n"
std.print(str2)

const<i64> variable = 10 * 12 + 100

std.println(variable, "")

enum Color:
	Red, Green, Blue

std.println((u64)Color.Green, "")

var _ = std.toupper('a')
_ = std.tolower('A')

var<u8> buff[10000]

const f = std.fopen("examples/test.qnp", "r")
std.println("Read % bytes", std.fread(f, buff, sizeof(buff) - 1))
std.fclose(f)
buff[sizeof(buff) - 1] = 0
std.println("Text read:\n%", buff)

enum Data:
	A = -10
	B
	C
	D = 10

std.println((i64)Data.C, "")

const testStr1 = (u8*)"This is a test string"
const testStr2 = (u8*)"This is a test string"

testStr1[0] = '.'

std.print("TestStr1: ", testStr1, "\n")
std.print("TestStr2: %\n", testStr2)

std.println()

std.println("TestStr1: %\nTestStr2: %", testStr1, testStr2)

std.println("File:Line -> %:%", __file__, __line__)
std.println("File:Line -> ", __file__, ":", __line__, "")

fn<?T> sum(?T a, ?T b) [T]...

fn<?T> sum(?T a, ...)...

std.println("Sum: %", sum(1, 2, 3))

std.assert(sum(1, 2, 3) == 6, "Sum failed")

alias print = std.print

print("%\n", std.min(5, 4, 8, 6))

print("Importing defer.qnp...\n")
import "defer.qnp"

print("Imported defer.qnp!\n")

fn<?T> sum(?T a, ?T b) [T]!:
	return a + b

fn<?T> sum(?T a, ...)!:
	return a + sum(...)

std.println("10^1 = %", std.pow(10, 1))
std.println("10^2 = %", std.pow(10, 2))
std.println("10^3 = %", std.pow(10, 3))
std.println("10^4 = %", std.pow(10, 4))
std.println("10^5 = %", std.pow(10, 5))
std.println("10^6 = %", std.pow(10, 6))
std.println("10^7 = %", std.pow(10, 7))
std.println("10^8 = %", std.pow(10, 8))
std.println("10^9 = %", std.pow(10, 9))

var<u8> testBuff[10]
std.print(">>> ")
\\std.scann(testBuff, 5)
testBuff[0] = 0
std.print(" -> ", testBuff)

std.println("The last character in this line should be a percent sign: %")
std.println("The last character in this line should not be '1': %", 1)
std.println("The last character in this line should be a percent sign again: ", "%")

std.exit(std.EXIT_FAILURE)


fn<?T> normalize(?T val) [T, Tnormalized]:
	var<Tnormalized> temp = val
	return temp

\\std.print("Normalized: %\n", normalize(10000))