import "assert.qnp"
import "fileio.qnp"
import "math.qnp"
import "memory.qnp"
import "stdio.qnp"
import "time.qnp"
import "random.qnp"
import "algorithm.qnp"
import "list.qnp"

std.println("Allocating 100 bytes")
var buff1 = std.malloc(100)
std.println("Allocating 10000 bytes")
const buff2 = std.malloc(10000)

std.println("Freeing 100 bytes")
std.free(buff1)

std.println("Freeing 10000 bytes")
std.free(buff2)

std.println("Allocating 12000 bytes")
buff1 = std.malloc(12000)

std.println("Freeing 12000 bytes")
std.free(buff1)

std.print("Allocating 1024 megabytes...")
buff1 = std.malloc(1024 * 1024 * 1024)
std.println(" DONE")

std.print("Clearing buff1... ")
const begin = std.getTime()
std.memset(buff1, 0, 1024 * 1024 * 1024)
const end = std.getTime()
std.println(" DONE\n -> Time: % ms", end - begin)

const str = (u8*)"ABCDEFGHIJKLMNOPQRSTUVWXYZ\n"
std.memcpy(str, "..................", 9)
std.println("%-----------------", str)

std.print("Freeing 1024 megabytes...")
std.free(buff1)
std.println(" DONE")

const str1 = (u8*)"Hello world, my name is TecStylos!"
var tok = std.strtok(str1, " ")
while tok:
	std.println(tok)
	tok = std.strtok(null, " ")

const str2 = \
	"Hello world, " \
	"my name is TecStylos!\n"
std.print(str2)

const<i64> variable = 10 * 12 + 100

std.println(variable)

enum Color:
	Red, Green, Blue

std.println((u64)Color.Green)

var _ = std.toupper('a')
_ = std.tolower('A')

const f = std.fopen("examples/test.qnp", "r")
const fSize = std.fseek(f, 0, std.Seek.End)
std.fseek(f, 0, std.Seek.Begin)
std.println("File size: % bytes", fSize)
var buff = (u8*)std.malloc(fSize + 1)
std.println("Read % bytes", std.fread(f, buff, fSize))
std.fclose(f)
buff[fSize] = 0
std.println("Text read:\n%", buff)

enum Data:
	A = -10
	B
	C
	D = 10

std.println((i64)Data.C)

const testStr1 = (u8*)"This is a test string"
const testStr2 = (u8*)"This is a test string"

testStr1[0] = '.'

std.print("TestStr1: ", testStr1, "\n")
std.print("TestStr2: %\n", testStr2)

std.println()

std.println("TestStr1: %\nTestStr2: %", testStr1, testStr2)

std.println("File:Line -> %:%", __file__, __line__)
std.println("File:Line -> ", __file__, ":", __line__)

fn<?T> sum(?T a, ?T b) [T]...

fn<?T> sum(?T a, ...)...

std.println("Sum: %", sum(1, 2, 3))

std.assert(sum(1, 2, 3) == 6, "Sum failed")

alias print = std.print

print("%\n", std.min(5, 4, 8, 6))

print("Importing defer.qnp...\n")
import "defer.qnp"

print("Imported defer.qnp!\n")

fn<?T> sum(?T a, ?T b) [T]!:
	return a + b

fn<?T> sum(?T a, ...)!:
	return a + sum(...)

std.println("10^1 = %", std.pow(10, 1))
std.println("10^2 = %", std.pow(10, 2))
std.println("10^3 = %", std.pow(10, 3))
std.println("10^4 = %", std.pow(10, 4))
std.println("10^5 = %", std.pow(10, 5))
std.println("10^6 = %", std.pow(10, 6))
std.println("10^7 = %", std.pow(10, 7))
std.println("10^8 = %", std.pow(10, 8))
std.println("10^9 = %", std.pow(10, 9))

var<u8[10]> testBuff
std.print(">>> ")
\\std.scann(testBuff, 5)
testBuff[0] = 0
std.print(" -> ", testBuff)

std.println("The last character in this line should be a percent sign: %")
std.println("The last character in this line should not be '1': %", 1)
std.println("The last character in this line should be a percent sign again: ", "%")

fn<?T> normalize(?T val) [T, Tnormalized]:
	var<Tnormalized> temp = val
	return temp

std.print("Normalized: %\n", normalize({i64, i8}, 10000))

fn<?T> limit(?T val) [T, min, max]:
	if val < min:
		return min
	elif val > max:
		return max
	return val

fn<?T> limit(?T val, ?T min, ?T max):
	if val < min:
		return min
	elif val > max:
		return max
	return val

\\std.print("Limited: %\n", limit(<i64, 0, 10>, 10000))

\\ Run 50000000 iterations of limit in a while loop and measure the whole time it takes
const begin1 = std.getTime()
var<i64> i = 0
while i < 50000000:
	limit({i64, 0, 10}, 10000)
	i += 1
const end1 = std.getTime()
std.println("Time: % ms", end1 - begin1)

\\ Run 50000000 iterations of limit in a while loop and measure the whole time it takes
const begin2 = std.getTime()
i = 0
while i < 50000000:
	limit(10000, 0, 10)
	i += 1
const end2 = std.getTime()
std.println("Time: % ms", end2 - begin2)


pack Position:
	var<i32> x
	var<i32> y

var<Position[10]> positions

positions[0].x = 10
positions[0].y = 20

std.println("Position: %, %", positions[0].x, positions[0].y)


fn<i32> foo(i32 a, i32 b) [T]:
	std.println("Mangled: %", __mangled__)
	std.println("Pretty:  %", __pretty__)
	return 0

foo({x}, 1, 2)
\\foo(<y>, 1, 2)

define RAND_MAX 160
define N_VALUES 1000000
define N_LINES 30

var<i32[RAND_MAX]> rand_arr
var loop_count = -1
while ++loop_count < N_VALUES:
	++rand_arr[std.random.range(0, RAND_MAX - 1)]

var max_val = 0
var min_val = N_VALUES
loop_count = -1
while ++loop_count < RAND_MAX:
	if rand_arr[loop_count] > max_val:
		max_val = rand_arr[loop_count]
	if rand_arr[loop_count] < min_val:
		min_val = rand_arr[loop_count]

loop_count = -1
while ++loop_count < RAND_MAX:
	rand_arr[loop_count] -= min_val
max_val -= min_val

var line_count = -1
while ++line_count < N_LINES:
	var col_count = -1
	while ++col_count < RAND_MAX:
		if rand_arr[col_count] >= max_val * (N_LINES - line_count + 1) / N_LINES:
			std.print("#")
		else:
			std.print(" ")
	std.println("  %", min_val + max_val * (N_LINES - line_count + 1) / N_LINES)

\\ pack TestPack [T]:
\\ 	var<T> a
\\ 	var<T> b

\\ var<TestPack{i32}> testPack
\\ testPack.a = 100
\\ std.println("testPack.a = %", testPack.a)

var<u8[64]> buffasdf
std.random.fill(buffasdf, 63)
buffasdf[63] = 0
std.println("Random: %", buffasdf)

import "limits.qnp"
std.println(std.limits.I64_MIN)

\\ pack List:
\\ 	pack Node:
\\ 		var<i32> value
\\ 		var<Node*> next
\\ 	var<Node*> head

var<u8**> argv
var argc = std.getargs(&argv)
while argc--:
	std.println(*(argv++))

fn<u64> bar(u64 a, u64 b):
	return a + b
fn<u64> bang(u64 a, u64 b):
	return a - b

fn<i64> add(i64 a, i64 b):
	return a + b

fn<i64> sub(i64 a, i64 b):
	return a - b

fn<i64> calc(i64 a, i64 b, fn<i64>(i64, i64) func):
	return func(a, b)

var<fn<i64>(i64, i64)> func = add

std.println("calc(1, 2, add) = %", calc(1, 2, func))


var<fn<u64>(u64, u64)> fLambda = lambda<u64>(u64 a, u64 b): return a + b;

fn<u64> call(fn<u64>(u64, u64) f, u64 a, u64 b):
	return f(a, b)

std.println("Result: %", call(fLambda, 1, 5))


var<i64[10]> arrToSort
arrToSort[0] = 324
arrToSort[1] = 534
arrToSort[2] = 83
arrToSort[3] = 374
arrToSort[4] = 192
arrToSort[5] = 6846
arrToSort[6] = 172
arrToSort[7] = 859
arrToSort[8] = 174
arrToSort[9] = 34

std.sort(arrToSort, 10, sizeof(i64), std.LMBD_COMPARE(*(i64 const*)a < *(i64 const*)b), std.LMBD_SWAP(sizeof(i64)))

const<i64> key = 6846
std.println("Index of %: %", key, std.bsearch(&key, arrToSort, 10, sizeof(i64), std.LMBD_COMPARE(*(i64 const*)a < *(i64 const*)b)))

std.println("Sorted:     % % % % % % % % % %", arrToSort[0], arrToSort[1], arrToSort[2], arrToSort[3], arrToSort[4], arrToSort[5], arrToSort[6], arrToSort[7], arrToSort[8], arrToSort[9])

std.shuffle(arrToSort, 10, sizeof(i64), std.LMBD_SWAP(sizeof(i64)), std.random.randU64)

std.println("Shuffled:   % % % % % % % % % %", arrToSort[0], arrToSort[1], arrToSort[2], arrToSort[3], arrToSort[4], arrToSort[5], arrToSort[6], arrToSort[7], arrToSort[8], arrToSort[9])

std.shuffle(arrToSort, 10, sizeof(i64), std.LMBD_SWAP(sizeof(i64)), std.random.randU64)

std.println("Reshuffled: % % % % % % % % % %", arrToSort[0], arrToSort[1], arrToSort[2], arrToSort[3], arrToSort[4], arrToSort[5], arrToSort[6], arrToSort[7], arrToSort[8], arrToSort[9])

var list = std.List.create((void*)100)
std.List.append(list, (void*)200)
std.List.insert(list, (void*)300)
std.List.insert(std.List.create((void*)400), list)

std.println("List: % %", (u64)list->data, (u64)list->next->data)

var lambdaSum = (fn<i64>(i64, i64))lambda<i64>(i64 a, i64 b): return a + b;

std.println("lambdaSum(13, 4) = %", lambdaSum(13, 4))

std.exit(std.EXIT_FAILURE)